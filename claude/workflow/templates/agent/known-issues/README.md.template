# Known Issues

This directory contains documented bugs, gotchas, and troubleshooting guides for the {{PROJECT_NAME}} project.

---

## What Goes Here?

Document an issue when:
- ‚úÖ The issue was non-obvious or tricky to debug
- ‚úÖ The issue could happen again
- ‚úÖ The solution provides learning value
- ‚úÖ It would help future developers

**Don't document**:
- ‚ùå Simple typos or one-line fixes
- ‚ùå Issues that can't recur (removed code)
- ‚ùå Obvious bugs with obvious fixes

---

## Known Issues Index

### 01 - [Issue Name](./01-issue-name.md)
**Tags**: [tag1, tag2, tag3]
**Severity**: High | Medium | Low
**Status**: ‚úÖ Fixed | ‚ö†Ô∏è Workaround | üîÑ In Progress

Brief one-line description of the issue.

### 02 - [Issue Name](./02-issue-name.md)
**Tags**: [tag1, tag2, tag3]
**Severity**: High | Medium | Low
**Status**: ‚úÖ Fixed | ‚ö†Ô∏è Workaround | üîÑ In Progress

Brief one-line description of the issue.

---

## Numbering System

- **Format**: 2-digit zero-padded (01-99)
- **Examples**: `01-database-timeout.md`, `02-api-rate-limit.md`
- **Sequential**: Number issues in the order they're documented

---

## Issue Document Structure

Each issue document should follow this format:

```markdown
# Known Issue NN: [Issue Name]

**Status**: ‚úÖ Fixed | ‚ö†Ô∏è Workaround | üîÑ In Progress
**Severity**: High | Medium | Low
**Discovered**: YYYY-MM-DD
**Resolved**: YYYY-MM-DD (if fixed)

## The Problem

[What went wrong? What symptoms appeared?]

## Root Cause

[Why did this happen? What was the underlying issue?]

## The Fix

[How was it resolved? What changes were made?]

## Prevention

[How to avoid this in the future?]

## Tags

[keyword1, keyword2, keyword3]
```

---

## Cross-Project Search

Known issues are searchable across **all projects** in `~/Projects`:

```bash
# Search all known-issues directories
find ~/Projects -type d -name "known-issues" -exec grep -r "search-term" {} \;

# Or use the /fix-bug command which searches automatically
```

This allows you to learn from issues encountered in other projects.

---

## Status Indicators

- ‚úÖ **Fixed** - Issue has been resolved with a permanent fix
- ‚ö†Ô∏è **Workaround** - Temporary solution exists, permanent fix pending
- üîÑ **In Progress** - Currently being investigated or fixed

---

## Severity Levels

- **High** - Blocks critical functionality, affects users
- **Medium** - Impacts functionality but workaround exists
- **Low** - Minor issue, cosmetic, or edge case

---

## Tagging Strategy

Use descriptive tags to make issues searchable:

**Technology Tags**: `django`, `postgres`, `react`, `docker`
**Type Tags**: `bug`, `performance`, `security`, `ui`
**Component Tags**: `auth`, `api`, `database`, `frontend`

**Example**: `[django, database, performance, postgres]`

---

## Workflow

### When You Encounter a Bug

1. **Debug and fix** the issue
2. **Test** the fix thoroughly
3. **Document** using `/document-issue` command
4. **Commit** the fix with reference to the issue doc
5. **Update** this README.md index

### When You Find a Similar Bug

1. **Search** known-issues across all projects
2. **Check** if issue is documented elsewhere
3. **Apply** the documented fix
4. **Update** the issue doc if needed (new context, better fix)

---

## Maintenance

### Regular Reviews
- Review quarterly for accuracy
- Archive fixed issues that are no longer relevant
- Update workarounds if permanent fixes are found

### When to Archive
- Issue document is obsolete (code removed)
- Issue can no longer occur (tech stack changed)
- Issue has been fixed for 6+ months with no recurrence

**Archive Location**: Create `./archived/` subdirectory

---

## Related Documentation

- [System Overview](../system/overview.md)
- [Task List](../README.md#tasks--features)
- [SOPs](../sops/README.md)

---

## Commands

```bash
# Document a new issue
/document-issue

# Search for known issues across all projects
find ~/Projects -type d -name "known-issues" -exec grep -ri "keyword" {} \;
```

---

**Last Updated**: {{INIT_DATE}}
