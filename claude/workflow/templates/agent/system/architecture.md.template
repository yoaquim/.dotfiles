# System Architecture

**Project**: {{PROJECT_NAME}}
**Last Updated**: {{INIT_DATE}}

---

## Architecture Overview

[High-level description of the system architecture]

**Architecture Style**: [e.g., Monolith, Microservices, Serverless, MVC]

**Key Principles**:
- Principle 1 (e.g., Separation of Concerns)
- Principle 2 (e.g., Single Responsibility)
- Principle 3 (e.g., Dependency Injection)

---

## System Components

### Component 1: [Name]
**Purpose**: [What this component does]

**Responsibilities**:
- Responsibility 1
- Responsibility 2
- Responsibility 3

**Location**: `path/to/component/`

**Dependencies**:
- Depends on Component X
- Uses Library Y

### Component 2: [Name]
**Purpose**: [What this component does]

**Responsibilities**:
- Responsibility 1
- Responsibility 2

**Location**: `path/to/component/`

---

## Data Flow

```
[User/Client]
    ↓
[API/Controller Layer]
    ↓
[Business Logic Layer]
    ↓
[Data Access Layer]
    ↓
[Database]
```

**Request Flow**:
1. User initiates action
2. Request hits API/Controller
3. Business logic processes request
4. Data layer handles persistence
5. Response returns to user

---

## Database Architecture

**Type**: {{DATABASE}}

**Schema Design**:
- [Approach: Normalized, Denormalized, Hybrid]
- [Key design decisions]

**Key Models/Tables**:
- `ModelName` - Purpose and relationships
- `ModelName` - Purpose and relationships

**Reference**: See `database-schema.md` for detailed schema

---

## API Design

**Style**: [REST, GraphQL, RPC]

**Key Endpoints**:
- `GET /api/resource` - Description
- `POST /api/resource` - Description
- `PUT /api/resource/:id` - Description
- `DELETE /api/resource/:id` - Description

**Authentication**: [JWT, Session, OAuth, etc.]

**Rate Limiting**: [Strategy if applicable]

---

## Security Architecture

### Authentication
- **Method**: [Session-based, Token-based, OAuth]
- **Storage**: [Where tokens/sessions are stored]
- **Expiration**: [Token/session lifetime]

### Authorization
- **Model**: [RBAC, ABAC, simple permissions]
- **Enforcement**: [Where and how permissions are checked]

### Data Protection
- **Encryption**: [What's encrypted and how]
- **Sensitive Data**: [How it's handled]
- **Security Headers**: [CSP, CORS, etc.]

---

## External Integrations

### Integration 1: [Service Name]
**Purpose**: [What this integration does]

**Type**: [REST API, SDK, Webhook]

**Data Flow**:
- Outbound: [What we send]
- Inbound: [What we receive]

**Error Handling**: [How failures are managed]

### Integration 2: [Service Name]
**Purpose**: [What this integration does]

**Type**: [Type of integration]

**Credentials**: [Environment variable names]

---

## File Storage

**Strategy**: [Local, S3, CDN]

**Organization**:
```
storage/
├── uploads/
├── static/
└── media/
```

**Access Control**: [How files are secured]

---

## Caching Strategy

**Layers**:
- **Browser Cache**: [What and for how long]
- **Application Cache**: [Redis, Memcached, in-memory]
- **Database Cache**: [Query caching if applicable]

**Invalidation**: [How cache is cleared]

---

## Error Handling

### Application Errors
- **Logging**: [Where errors are logged]
- **Monitoring**: [Error tracking service if any]
- **User Feedback**: [How errors are shown to users]

### External Service Failures
- **Retry Logic**: [Retry strategy]
- **Fallbacks**: [Graceful degradation]
- **Circuit Breakers**: [If implemented]

---

## Performance Considerations

### Database Optimization
- **Indexing Strategy**: [Key indexes]
- **Query Optimization**: [N+1 prevention, etc.]
- **Connection Pooling**: [If applicable]

### Application Performance
- **Async Processing**: [Background jobs, queues]
- **Lazy Loading**: [Where implemented]
- **Code Splitting**: [If applicable for frontend]

---

## Scalability

**Current Scale**: [Traffic/data volume]

**Bottlenecks**:
- Potential bottleneck 1
- Potential bottleneck 2

**Scaling Strategy**:
- **Horizontal**: [How to add more instances]
- **Vertical**: [Resource limits and upgrade path]
- **Database**: [Read replicas, sharding strategy]

---

## Deployment Architecture

**Environment**: [Docker, Kubernetes, VMs, Serverless]

**Infrastructure**:
```
[Load Balancer]
    ↓
[App Server(s)]
    ↓
[Database Server]
```

**CI/CD**: [Pipeline description]

**Reference**: See `.agent/sops/deployment.md` for procedures

---

## Testing Architecture

### Test Pyramid
- **Unit Tests**: [What they cover]
- **Integration Tests**: [What they cover]
- **E2E Tests**: [What they cover]

**Test Environment**: [How test env is set up]

**Reference**: See `~/.claude/workflow/sops/testing-principles.md`

---

## Design Patterns

### Pattern 1: [Pattern Name]
**Where**: [Which components use this]
**Why**: [Reason for using this pattern]
**Example**: `path/to/example.py:123`

### Pattern 2: [Pattern Name]
**Where**: [Which components use this]
**Why**: [Reason for using this pattern]
**Example**: `path/to/example.py:456`

---

## Configuration Management

**Environment-Specific**:
- `.env.local` - Local development
- `.env.staging` - Staging environment
- `.env.production` - Production environment

**Feature Flags**: [If implemented]

---

## Monitoring & Observability

**Logging**:
- **Level**: [INFO, DEBUG, ERROR levels]
- **Storage**: [Where logs go]
- **Rotation**: [Log rotation strategy]

**Metrics**: [If tracking performance metrics]

**Alerting**: [If alerts are configured]

---

## Future Architecture Plans

### Planned Changes
1. **Change 1**: [What and why]
2. **Change 2**: [What and why]

### Technical Debt
1. **Debt Item 1**: [Description and impact]
2. **Debt Item 2**: [Description and impact]

---

## Related Documentation

- [System Overview](./overview.md)
- [Database Schema](./database-schema.md) (if applicable)
- [Task List](../README.md#tasks--features)
- [SOPs](../sops/README.md)

---

**Last Updated**: {{INIT_DATE}}
**Update Frequency**: After architectural changes or new integrations
