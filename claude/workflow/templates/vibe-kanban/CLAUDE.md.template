# {{PROJECT_NAME}} - Claude Code Instructions

**Project Type**: {{FRAMEWORK}} ({{LANGUAGE}})
**Workflow**: Vibe Kanban + Claude Code
**Initialized**: {{INIT_DATE}}

---

## Project Overview

{{PRODUCT_VISION}}

### Target Users
{{TARGET_USERS}}

### Key Goals
{{KEY_GOALS}}

---

## Workflow: Vibe Kanban Integration

**This project uses Vibe Kanban for task orchestration.**

### Key Principles

1. **Separation of Concerns**
   - **Vibe Kanban**: Manages tasks and orchestrates Claude Code instances
   - **`.agent/` Directory**: Provides project context and documentation

2. **No Local Task Management**
   - ❌ No `.agent/tasks/` directory
   - ✅ Vibe Kanban is the source of truth for all tasks

3. **1-Point Rule** (CRITICAL)
   - Every VK subtask is 1 story point (1-2 hours)
   - If > 1 point, it gets broken down further
   - Ensures focused, completable work units

4. **Documentation as First-Class**
   - Every epic (VK Task) has a documentation subtask
   - System docs stay current automatically

5. **TDD-Friendly**
   - Tests are separate subtasks
   - Can be created before implementation

---

## Available Commands

### VK Workflow Commands

**Feature Definition (WHAT to build):**
```bash
/vk-feature <feature description>
```
- Interactive requirements gathering
- Creates `.agent/features/<name>.md`
- EARS format acceptance criteria

**Implementation Planning (HOW to build):**
```bash
/vk-plan [feature-name]
```
- Creates VK epics and 1-point subtasks
- Auto-generates documentation subtasks
- Auto-generates test subtasks
- Links to feature requirements

**Status & Monitoring:**
```bash
/vk-status
```
- VK task/subtask progress
- Feature completion status
- Documentation health
- Next recommended actions

**Documentation Sync:**
```bash
/vk-sync-docs
```
- Sync `.agent/` docs with VK progress
- Backup to doc subtasks

### Standard Commands (Still Available)

```bash
/fix-bug <description>        # Quick bug fix workflow
/document-issue               # Document known issues
```

### For VK-Spawned Instances

When Vibe Kanban spawns a Claude Code instance to work on a subtask, that instance has access to:
- All commands above
- This CLAUDE.md file (project instructions)
- `.agent/` documentation (project context)
- Feature requirements in `.agent/features/`
- Task description from VK (specific instructions)

---

## Project Structure

```
{{PROJECT_NAME}}/
├── CLAUDE.md                 # This file - Core instructions
├── README.md                 # Project overview
├── .agent/                   # VK-enabled documentation
│   ├── .vk-enabled           # VK workflow marker
│   ├── .last-feature         # Tracks last feature for /vk-plan
│   ├── features/             # Feature requirements (WHAT)
│   │   └── [feature-name].md
│   ├── system/               # System documentation
│   │   ├── overview.md
│   │   ├── architecture.md
│   │   └── database-schema.md (if applicable)
│   ├── sops/                 # Project-specific SOPs
│   │   └── README.md
│   └── known-issues/         # Known issues
│       └── README.md
├── [NO .agent/tasks/ directory - VK manages tasks]
└── [Your project code]
```

**Key difference from standard workflow:** No `.agent/tasks/` directory.

---

## Technology Stack

- **Language**: {{LANGUAGE}}
- **Framework**: {{FRAMEWORK}}
- **Database**: {{DATABASE}}
- **Testing**: {{TEST_FRAMEWORK}}
- **Container**: {{CONTAINER_PLATFORM}}

### Development Commands

**Start Development Server:**
```bash
{{DEV_COMMAND}}
```

**Run Tests:**
```bash
{{TEST_COMMAND}}
```

**Build:**
```bash
{{BUILD_COMMAND}}
```

---

## Documentation

### Project Documentation (`.agent/`)

All project-specific documentation lives in `.agent/`:

- **Features**: `.agent/features/` - What to build (requirements)
- **System**: `.agent/system/` - Architecture, tech decisions
- **SOPs**: `.agent/sops/` - Project-specific processes
- **Known Issues**: `.agent/known-issues/` - Bugs, gotchas

### Universal Documentation

Referenced, not copied (single source of truth):

- **Git Workflow**: `~/.claude/workflow/sops/git-workflow.md`
- **Testing Principles**: `~/.claude/workflow/sops/testing-principles.md`
- **Documentation Standards**: `~/.claude/workflow/sops/documentation-standards.md`
- **VK Integration**: `~/.claude/workflow/sops/vk-integration.md`

### Human Guide

For learning the VK-Claude workflow:
- `~/.claude/guides/vk-product-workflow.md`

---

## Typical Development Flow

### 1. Define Feature (WHAT)
```bash
/vk-feature "User authentication with email and password"
```
- Interactive requirements gathering
- Creates `.agent/features/user-authentication.md`
- EARS format acceptance criteria
- User stories and edge cases

### 2. Plan Implementation (HOW)
```bash
/vk-plan
```
- Reads feature requirements
- Breaks into epics (VK Tasks)
- Creates 1-point subtasks (VK Subtasks)
- Auto-adds doc and test subtasks
- Creates tasks in Vibe Kanban

### 3. VK Orchestrates
- Vibe Kanban spawns Claude Code instances per subtask
- Each instance has access to:
  - `.agent/` documentation (context)
  - Feature requirements (acceptance criteria)
  - Task description (specific instructions)
  - Slash commands (available tools)

### 4. Monitor Progress
```bash
/vk-status
```
- VK progress (epics, subtasks, %)
- Feature completion
- Documentation health
- Next steps

### 5. Sync Documentation (if needed)
```bash
/vk-sync-docs
```
- Updates `.agent/system/` based on VK completion
- Backup to auto-generated doc subtasks

---

## Core Principles

### SIMPLICITY FIRST
- Break complex features into simple, focused tasks
- 1-point subtasks (1-2 hours each)
- Single responsibility per subtask
- Clear acceptance criteria

### TEST-DRIVEN DEVELOPMENT
- Test subtasks separate from implementation
- Can be created before implementation (true TDD)
- Reference feature acceptance criteria
- Aim for 80%+ coverage

### DOCUMENTATION AS CODE
- Every epic has a documentation subtask
- System docs updated as features complete
- Documentation is not optional
- Keeps `.agent/` current

### FEATURE-DRIVEN
- Features define WHAT (user needs, requirements)
- VK tasks define HOW (technical implementation)
- Always trace back to user value
- EARS format acceptance criteria

---

## VK-Specific Guidelines

### When Working on VK Subtasks

**You are a Claude Code instance spawned by Vibe Kanban.**

**Your subtask:**
- Is 1 point (1-2 hours of work)
- Has a clear, focused objective
- Has specific acceptance criteria
- Links to feature requirements

**Your resources:**
- Task description (your specific instructions)
- `.agent/features/<name>.md` (feature requirements)
- `.agent/system/` (project architecture)
- This CLAUDE.md file (core instructions)
- Slash commands (available tools)

**Your approach:**
1. Read task description thoroughly
2. Read referenced feature requirements
3. Check acceptance criteria (EARS format)
4. Review relevant system docs
5. Implement focused solution
6. Verify acceptance criteria met
7. Follow 1-point rule (don't over-engineer)

**Success criteria:**
- [ ] Acceptance criteria from task description met
- [ ] Acceptance criteria from feature requirements met
- [ ] Code follows project patterns
- [ ] Changes are focused (2-3 files max)
- [ ] Completable in 1-2 hours

---

## Getting Help

### Resources

- **VK Workflow Guide**: `~/.claude/guides/vk-product-workflow.md` (human-friendly)
- **VK Integration SOP**: `~/.claude/workflow/sops/vk-integration.md` (technical)
- **This File**: Core project instructions
- **Feature Docs**: `.agent/features/` (requirements)
- **System Docs**: `.agent/system/` (architecture)

### Commands

- `/vk-status` - What's the current state?
- `/vk-feature` - Define new feature
- `/vk-plan` - Create VK tasks
- `/vk-sync-docs` - Update documentation

### Troubleshooting

- **Lost?** → Run `/vk-status` to see where you are
- **Need context?** → Read `.agent/system/overview.md`
- **Unclear requirements?** → Check `.agent/features/<name>.md`
- **Process questions?** → Read `~/.claude/workflow/sops/vk-integration.md`

---

## Important Notes

### What Makes This Different

**Standard Claude Code Workflow:**
- Local `.agent/tasks/` directory
- Tasks documented locally
- Sequential execution
- Manual task management

**VK-Claude Code Workflow:**
- ❌ No `.agent/tasks/` directory
- ✅ Vibe Kanban manages tasks
- ✅ Parallel execution (multiple instances)
- ✅ Automated orchestration
- ✅ 1-point rule enforced
- ✅ Isolated git worktrees

### When VK Doesn't Work

If VK orchestration isn't suitable for specific work:
- Use standard slash commands (`/fix-bug`, etc.)
- Work directly (VK instances can do this)
- Document in known-issues if pattern emerges

### Flexibility

The VK workflow is a framework, not a straitjacket:
- Adapt as needed
- Document deviations
- Improve process iteratively
- Balance structure with pragmatism

---

## Project-Specific Notes

[Add any project-specific instructions, gotchas, or patterns here]

[To be filled in as project evolves]

---

**Last Updated**: {{INIT_DATE}}
**Workflow**: Vibe Kanban + Claude Code
**For Help**: Run `/vk-status` or read `~/.claude/guides/vk-product-workflow.md`
