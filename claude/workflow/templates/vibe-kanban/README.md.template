# .agent/ Documentation Index

**Project**: {{PROJECT_NAME}}
**Workflow**: Vibe Kanban + Claude Code
**Last Updated**: {{INIT_DATE}}

---

## Overview

This directory contains all project-specific documentation and context for {{PROJECT_NAME}}.

**VK Workflow Enabled**: This project uses Vibe Kanban for task orchestration. There is NO `.agent/tasks/` directory - Vibe Kanban is the source of truth for all tasks.

---

## Directory Structure

```
.agent/
├── README.md                 # This file - Documentation index
├── .vk-enabled               # VK workflow marker file
├── .last-feature             # Tracks last feature for /vk-plan
├── features/                 # Feature requirements (WHAT to build)
│   └── [feature-name].md
├── system/                   # System documentation
│   ├── overview.md           # Project overview, tech stack, current state
│   ├── architecture.md       # Technical architecture, components
│   └── database-schema.md    # Database models (if applicable)
├── sops/                     # Project-specific SOPs
│   └── README.md
└── known-issues/             # Known issues and troubleshooting
    └── README.md

[NO tasks/ directory - VK manages tasks externally]
```

---

## Core Documentation

### Features (WHAT to Build)

**Location**: `./features/`

Feature requirements define **WHAT** to build from user perspective:
- User needs and pain points
- User stories (prioritized)
- Acceptance criteria (EARS format)
- Edge cases and constraints
- Success metrics

**Create features**: `/vk-feature <description>`

**Features**:
[To be populated as features are defined]

---

### System Documentation

#### overview.md

**Location**: `./system/overview.md`

Contains:
- Product vision
- Target users and key goals
- Technology stack
- Current project state
- Decisions made and pending
- Next steps

**Updated by**: Documentation subtasks (auto-generated in VK)

#### architecture.md

**Location**: `./system/architecture.md`

Contains:
- Technical architecture
- Key components and modules
- API endpoints (if applicable)
- Database schema (high-level)
- Data flow
- File structure
- Integration points

**Updated by**: Documentation subtasks per epic

#### database-schema.md

**Location**: `./system/database-schema.md` (if applicable)

Contains:
- Database models/tables
- Fields and types
- Relationships
- Indexes
- Migrations history

**Updated by**: Documentation subtasks when models change

---

### SOPs (Standard Operating Procedures)

**Location**: `./sops/`

Project-specific SOPs live here. Universal SOPs (git workflow, testing, docs standards) are referenced from `~/.claude/workflow/sops/`.

**See**: `./sops/README.md` for full SOP index

---

### Known Issues

**Location**: `./known-issues/`

Documents known issues, bugs, gotchas, and troubleshooting insights.

**Create issues**: `/document-issue`

**See**: `./known-issues/README.md` for full issues list

---

## VK Workflow

### How Tasks Work

**In Standard Workflow:**
- Tasks documented in `.agent/tasks/`
- Numbered 000-999
- Implemented with `/implement-task`

**In VK Workflow:**
- Tasks managed in Vibe Kanban
- Epics (VK Tasks) + Subtasks (VK Subtasks)
- All subtasks are 1 point (1-2 hours)
- Orchestrated automatically by VK

**No `.agent/tasks/` directory** - VK is source of truth

### Commands

```bash
# Define feature requirements
/vk-feature <description>

# Create VK task hierarchy
/vk-plan [feature-name]

# Check status
/vk-status

# Sync documentation
/vk-sync-docs
```

### Resources

- **Human Guide**: `~/.claude/guides/vk-product-workflow.md`
- **Technical SOP**: `~/.claude/workflow/sops/vk-integration.md`
- **Core Instructions**: `../CLAUDE.md`

---

## Universal SOPs

These apply to **all projects** and are referenced, not copied:

### Git Workflow
**Location**: `~/.claude/workflow/sops/git-workflow.md`

- Branch naming conventions
- Commit message format
- Merge workflow
- Best practices

### Testing Principles
**Location**: `~/.claude/workflow/sops/testing-principles.md`

- Test types (unit, integration, e2e)
- Coverage goals (80%+)
- Arrange-Act-Assert pattern
- Best practices

### Documentation Standards
**Location**: `~/.claude/workflow/sops/documentation-standards.md`

- Naming conventions (lowercase, kebab-case)
- Markdown standards
- Section structure
- Reference format

### VK Integration
**Location**: `~/.claude/workflow/sops/vk-integration.md`

- 1-point rule (critical)
- Task hierarchy (Epics → Subtasks)
- Documentation subtask pattern
- Testing subtask pattern
- How VK and `.agent/` interact

---

## Documentation Health

### Keeping Docs Current

**With VK Workflow:**

1. **Automatic**: Each epic gets a documentation subtask (auto-generated by `/vk-plan`)
2. **Manual Backup**: Run `/vk-sync-docs` if doc subtasks missed

**Best practice**: Don't skip documentation subtasks - they keep this directory current.

### What Should Be Documented

**Always:**
- ✅ Feature requirements (before implementation)
- ✅ Completed features (in overview.md)
- ✅ Architecture changes (in architecture.md)
- ✅ Database changes (in database-schema.md)
- ✅ Known issues (in known-issues/)

**As Needed:**
- Project-specific SOPs (in sops/)
- Custom patterns or conventions
- Deployment procedures
- Environment setup

### When to Update

**Feature Requirements** (`features/`):
- Before starting implementation
- Use `/vk-feature` command

**System Docs** (`system/`):
- After completing each epic (via doc subtasks)
- Or manually with `/vk-sync-docs`

**Known Issues** (`known-issues/`):
- When bugs or gotchas discovered
- Use `/document-issue` command

---

## Quick Start

### New to This Project?

1. **Read this first**: `../CLAUDE.md` (core instructions)
2. **Understand the vision**: `./system/overview.md`
3. **Review architecture**: `./system/architecture.md`
4. **Check current status**: Run `/vk-status`
5. **See features**: Browse `./features/`

### Working on VK Subtask?

1. **Read your task**: VK task description has specific instructions
2. **Check feature requirements**: `.agent/features/<name>.md`
3. **Review architecture**: `.agent/system/architecture.md`
4. **Understand acceptance criteria**: EARS format in feature doc
5. **Implement focused solution**: 1-point rule (1-2 hours, 2-3 files max)

### Defining New Feature?

1. **Run**: `/vk-feature "feature description"`
2. **Answer questions**: Interactive requirements gathering
3. **Review requirements**: `.agent/features/<name>.md` created
4. **Plan implementation**: `/vk-plan`

### Checking Progress?

1. **Run**: `/vk-status`
2. **See**: VK progress, features, docs health, next steps

---

## File Naming Conventions

### Features
- **Format**: `kebab-case.md`
- **Example**: `user-authentication.md`, `asset-upload.md`
- **Location**: `./features/`

### System Docs
- **Format**: `lowercase-kebab.md`
- **Examples**: `overview.md`, `architecture.md`, `database-schema.md`
- **Location**: `./system/`

### SOPs
- **Format**: `kebab-case.md`
- **Example**: `deployment-process.md`
- **Location**: `./sops/`

### Known Issues
- **Format**: `NN-issue-name.md` (NN = 01-99)
- **Example**: `01-database-timeout.md`, `02-api-rate-limit.md`
- **Location**: `./known-issues/`

All lowercase, kebab-case, for consistency.

---

## Cross-Project Features

### Known Issues Search

Known issues are searchable across **all projects**:

```bash
# Find similar issues in other projects
find ~/Projects -type f -path "*/\.agent/known-issues/*.md" -exec grep -l "keyword" {} \;
```

This helps:
- Learn from other projects
- Avoid solving same problem twice
- Build institutional knowledge
- Pattern recognition

### Universal SOPs

Git workflow, testing principles, and documentation standards apply to all projects. Update once in `~/.claude/workflow/sops/`, applies everywhere.

---

## Getting Help

### Commands

```bash
/vk-status              # What's the current state?
/vk-feature <desc>      # Define new feature
/vk-plan                # Create VK tasks
/vk-sync-docs           # Update documentation
```

### Resources

- **Core Instructions**: `../CLAUDE.md`
- **VK Workflow Guide**: `~/.claude/guides/vk-product-workflow.md` (for humans)
- **VK Integration SOP**: `~/.claude/workflow/sops/vk-integration.md` (technical)
- **This File**: Documentation index

### Troubleshooting

- **Lost?** → `/vk-status` shows where you are
- **Need context?** → Read `./system/overview.md`
- **Unclear requirements?** → Check `./features/<name>.md`
- **Process questions?** → Read `~/.claude/workflow/sops/vk-integration.md`

---

## Version History

- **{{INIT_DATE}}**: Project initialized with VK workflow
  - Created `.agent/` structure (no tasks/ directory)
  - VK workflow enabled
  - Initial system documentation

[Add major documentation changes here as project evolves]

---

**Workflow**: Vibe Kanban + Claude Code
**Task Management**: Vibe Kanban (external)
**Documentation**: This directory
**For Help**: Run `/vk-status`
