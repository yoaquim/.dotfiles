#!/usr/bin/env bash

#==========================
# GIT SETTINGS & ALIASES
#==========================

# Git coloring
export LESS=-R

# TODO: Git bash completion 
#

# Git status alias
alias gs="git status"

# Git add
alias ga="git add"

# Git reset
alias gr="git reset"

# Git reset hard
alias grh="git reset --hard"

# Git pull
alias gp="git pull"

# Git pull with rebase
alias gpr="git pull --rebase"

# Git fetch
alias gf="git fetch"

# Git log
alias gl="git log"

# Git add all
alias gall="git add --all"

# Git add untracked
alias gau="git add -u"

# Git add patch mode
alias gap="git add -p"

# Git checkout
alias gc="git checkout"

# Git checkout new branch
alias gcb="git checkout -b"

# Git branch alias
alias gb="git branch"

# Copy branch name
alias gbcp="git rev-parse --abbrev-ref HEAD | tr -d '\n' | tr -d ' ' | pbcopy"

# Git ammend last commit
alias gam="git commit --amend"

# Git alias for git diff
alias gd="git diff"
#
# Git alias view all files updated in latest commit
alias gfd="git diff-tree --no-commit-id --name-only -r \$(git rev-parse --short head)"

# Git alias for git diff --staged
alias gds="git diff --staged"

# Git pretty log (custom git alias)
alias glog="git plog"

# Git update all git submodules
alias gsmu="git submodule foreach git pull origin master"

# Git initialize all plugins, recursively (sub-plugins); sometimes works better than 'gsmu' alias
alias gsmi="git submodule update --init --recursive"

alias gcsha="git rev-parse HEAD"

alias rc-diff="git log --no-merges --pretty=\"%Cblue*%Creset %s, %b(%Cgreen%cn%Creset)\" --date=relative origin/master..origin/development"

alias merges-diff="git log --merges --pretty=\"%Cblue*%Creset %s, %b(%Cgreen%cn%Creset)\" --date=relative origin/master..origin/development"

# Set tracking info for branch
function gbu() {
    BRANCH_NAME=$(git symbolic-ref --short -q HEAD)
    git branch --set-upstream-to=origin/${BRANCH_NAME} ${BRANCH_NAME}
}

# Git checkout branch that first matches grep query
function gcg() {
    branch=$(git branch | grep "${1}" | head -1)
    git checkout ${branch}
}


# Git checkout new branch with remote-run/ prefix
function gcrb(){
    git checkout -b "remote-run/${1}"
}

#Git push
function gpush() {
    branch=$(git rev-parse --abbrev-ref HEAD | tr -d '\n' | tr -d ' ')
    if [ -z "$1" ]; then
        git push origin "${branch}:${branch}"
    else
        git push origin "${branch}:${branch}" "${1}"
    fi
}


# Git commit without having to enter quotes for message
function gcom(){
	message="${@}";
	git commit -m "${message}"
}

# Git commit, then push to origin current branch
function gup(){
	gcom "$@"
	gpush
}

# Stash changes, checkout master, pull from origin, checkout to previous branch, rebase off of master, then pop stashed changes
# Used to quickly bring current branch up-to-date with origin/master
function rebmast(){
	branch=$(git symbolic-ref --short -q HEAD)
	git checkout master
	git pull
	git checkout $branch
	git rebase master
}
#
# Stash changes, checkout development, pull from origin, checkout to previous branch, rebase off of development, then pop stashed changes
# Used to quickly bring current branch up-to-date with origin/development
function rebdev(){
	branch=$(git symbolic-ref --short -q HEAD)
	git checkout development
	git pull
	git checkout $branch
	git rebase development
}
