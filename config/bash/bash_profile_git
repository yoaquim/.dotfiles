# ───────────────────────────────────────────────────
# V. Git Bash Config
# ───────────────────────────────────────────────────


# aliases
# ───────────────────────────────────────────────────

# git bash completion (OS-aware)
if [[ "$OSTYPE" == "darwin"* ]] && command -v brew &> /dev/null; then
    # macOS with Homebrew
    if [ -f `brew --prefix`/etc/bash_completion ]; then
        . `brew --prefix`/etc/bash_completion
    fi
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Linux
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    fi
fi

# git coloring
export less=-r

# git status alias
alias gs="git status"

# git add
alias ga="git add"

# git reset
alias gr="git reset"

# git reset hard
alias grh="git reset --hard"

# git pull
alias gp="git pull"

# git pull with rebase
alias gpr="git pull --rebase"

# git fetch
alias gf="git fetch"

# git log
alias gl="git log"

# git add all
alias gall="git add --all"

# git add untracked
alias gau="git add -u"

# git add patch mode
alias gap="git add -p"

# git checkout
alias gco="git checkout"

# git commit
alias gcomm="git commit -m"

# git checkout new branch
alias gcb="git checkout -b"

# git branch alias
alias gb="git branch"

# copy branch name
alias gbcp="git rev-parse --abbrev-ref HEAD | tr -d '\n' | tr -d ' ' | pbc"

# git ammend last commit
alias gam="git commit --amend"

# git ammend last commit and dont edit message
alias gamn="git commit --amend --no-edit"

# git alias for git diff
alias gd="git diff"
#
# git alias view all files updated in latest commit
alias gfd="git diff-tree --no-commit-id --name-only -r \$(git rev-parse --short head)"

# git alias for git diff --staged
alias gds="git diff --staged"

# git pretty log (custom git alias)
alias glog="git plog"

# git update all git submodules
alias gsmu="git submodule foreach git pull origin master"

# git initialize all plugins, recursively (sub-plugins); sometimes works better than 'gsmu' alias
alias gsmi="git submodule update --init --recursive"

alias gcsha="git rev-parse HEAD"

alias rc-diff="git log --no-merges --pretty=\"%Cblue*%Creset %s, %b(%Cgreen%cn%Creset)\" --date=relative origin/master..origin/development"

alias merges-diff="git log --merges --pretty=\"%Cblue*%Creset %s, %b(%Cgreen%cn%Creset)\" --date=relative origin/master..origin/development"


# functions
# ───────────────────────────────────────────────────


# set tracking info for branch
function gbu() {
    BRANCH_NAME=$(git symbolic-ref --short -q HEAD)
    git branch --set-upstream-to=origin/${BRANCH_NAME} ${BRANCH_NAME}
}

# git checkout branch that first matches grep query
function gcg() {
    branch=$(git branch | grep "${1}" | head -1)
    git checkout ${branch}
}


# git checkout new branch with remote-run/ prefix
function gcrb(){
    git checkout -b "remote-run/${1}"
}

#git push
function gpush() {
    branch=$(git rev-parse --abbrev-ref HEAD | tr -d '\n' | tr -d ' ')
    if [ -z "$1" ]; then
        git push origin "${branch}:${branch}"
    else
        git push origin "${branch}:${branch}" "${1}"
    fi
}

# git commit, then push to origin current branch
function gup(){
	gcomm "$*"
	gpush
}

# used to quickly bring current branch up-to-date with origin/master
function roob(){
        SOURCE_BRANCH=${1}
	TARGET_BRANCH=$(git symbolic-ref --short -q HEAD)
	git checkout ${SOURCE_BRANCH}
	git pull
	git checkout ${TARGET_BRANCH}
	git rebase ${SOURCE_BRANCH}
}

